<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Murloc world</title>
  
  <subtitle>斗鱼 MurlocWan</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://macan999server.com/"/>
  <updated>2017-04-27T09:12:59.000Z</updated>
  <id>http://macan999server.com/</id>
  
  <author>
    <name>小万叔叔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Compress in iOS</title>
    <link href="http://macan999server.com/2017/04/27/Compress-in-iOS/"/>
    <id>http://macan999server.com/2017/04/27/Compress-in-iOS/</id>
    <published>2017-04-27T09:06:37.000Z</published>
    <updated>2017-04-27T09:12:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>无论的视频还是图像，压缩都包括压缩分辨率和质量，视频还包括音频的采样。</p><h3 id="iOS-视频压缩报告"><a href="#iOS-视频压缩报告" class="headerlink" title="iOS 视频压缩报告"></a>iOS 视频压缩报告</h3><p>iOS 自带视频压缩接口 AVAssetExportSession，我们先看系统的这些压缩的输出数据(先忽略黄字)，选用主流720P和1080P视频录制格式</p><p><img src="http://oedbfiet1.bkt.clouddn.com/20170427149328422477119.png" alt=""></p><p>可见在我们选择系统的960<em>540的默认输出分辨率和相同的音频AAC采样率的情况，同伟大的鹅🐧厂还是有差别的<br>4.6MB 对 1.1MB<br>既然基本的压缩比例还是不够高，那就要从输入和输出着手，对音频和视频做重采样，其实也是一些直播里面常用到的，通过<br>AVAssetReader 和 AVAssetWrite 同步进行transcode .<br>目前的优化比例如上图所示，1.6~1.7M 对应540</em>960 在一个还可以的视频质量的范围。</p><h3 id="iOS-图片压缩报告"><a href="#iOS-图片压缩报告" class="headerlink" title="iOS 图片压缩报告"></a>iOS 图片压缩报告</h3><p>JPG格式每个平台都有自己的图片压缩方式，先看系统的压缩<br><img src="http://oedbfiet1.bkt.clouddn.com/2017042714932842546254.png" alt=""><br>但是这个只能作为参考，因为JPG 的压缩算法本身还依赖与图片内部的元素，压缩的原则关注两点:</p><ol><li>质量不能太差，一般维持在0.7左右的压缩质量。</li><li>过大的分辨率对于手机来说，一般没有太多的展示空间，所以参考的手机的可用最大分辨率来作为压缩分辨率的一种策略，<br>例如鹅厂的960*1280.</li></ol><h3 id="目前结论"><a href="#目前结论" class="headerlink" title="目前结论"></a>目前结论</h3><ul><li>视频压缩，可以参考目前的压缩比率，应该是一个可以接收的范围。</li><li>图片压缩维持0.7的质量加上以手机的最大分辨率这两点做为压缩的标准。</li></ul><h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><p>GitHub: VideoToolboxPlus, SDAVAssetExportSession<br>Apple:   RosyWriter</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;p&gt;无论的视频还是图像，压缩都包括压缩分辨率和质量，视频还包括音频的采样。&lt;/p&gt;
&lt;h3 id=&quot;iOS-视频压缩报告&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="iOS" scheme="http://macan999server.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Closure-Swift</title>
    <link href="http://macan999server.com/2017/03/16/Closure-Swift/"/>
    <id>http://macan999server.com/2017/03/16/Closure-Swift/</id>
    <published>2017-03-16T13:24:41.000Z</published>
    <updated>2017-04-15T01:29:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 参数包含 InnerName , ExternalName , 可以只写一个参数，</span></span><br><span class="line"><span class="comment">//可以给予默认值， 但必须从右到左</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">name</span><span class="params">(externalName innerName: String)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">name1</span><span class="params">(innerName: String)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">name2</span><span class="params">(first: String, Second: String = <span class="string">""</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name2(first: <span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><h3 id="函数签名是不包含参数名"><a href="#函数签名是不包含参数名" class="headerlink" title="函数签名是不包含参数名"></a>函数签名是不包含参数名</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">methodSign</span><span class="params">(first: String, Second: String)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">methodSign1</span><span class="params">(first: String, Second: String)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkSign</span><span class="params">(funcSign: <span class="params">(String, String)</span></span></span> -&gt; ()) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkSign(funcSign: methodSign)</span><br><span class="line">checkSign(funcSign: methodSign1)</span><br></pre></td></tr></table></figure><h3 id="函数式作为一等公民，可以当做变量，返回值，参数，这提升了到函数编程的思想"><a href="#函数式作为一等公民，可以当做变量，返回值，参数，这提升了到函数编程的思想" class="headerlink" title="函数式作为一等公民，可以当做变量，返回值，参数，这提升了到函数编程的思想"></a>函数式作为一等公民，可以当做变量，返回值，参数，这提升了到函数编程的思想</h3><h4 id="Closure的简化版本-Closure-可以看做是包含上下文的函数"><a href="#Closure的简化版本-Closure-可以看做是包含上下文的函数" class="headerlink" title="Closure的简化版本, Closure 可以看做是包含上下文的函数"></a>Closure的简化版本, Closure 可以看做是包含上下文的函数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标准版本</span></span><br><span class="line">    <span class="keyword">let</span> closureExpression = &#123; (first: <span class="type">Int</span>, second: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> first + second</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//a. 可以自己推导</span></span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = &#123; (first: <span class="type">Int</span>, second: <span class="type">Int</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> first + second</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//b. 如果只有一条语句，可以去掉return</span></span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = &#123; (first: <span class="type">Int</span>, second: <span class="type">Int</span>) <span class="keyword">in</span></span><br><span class="line">        first + second</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//c. 可以去掉参数</span></span><br><span class="line">    <span class="keyword">var</span> array = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">    array.<span class="built_in">map</span>(&#123; <span class="type">String</span>($<span class="number">0</span>) &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//d.如果是最后一个，可以把Closure放到后面</span></span><br><span class="line">    array.<span class="built_in">map</span>() &#123;</span><br><span class="line">        <span class="type">String</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//e.如果只有一个参数，还可以省略()</span></span><br><span class="line">    array.<span class="built_in">map</span> &#123;</span><br><span class="line">        <span class="type">String</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//f. autoClosure</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">autoClosureFunc</span><span class="params">(<span class="number">_</span> lhs: Int, <span class="number">_</span> rhs: Int, <span class="number">_</span> compare: @autoclosure <span class="params">(Int, Int)</span></span></span>-&gt;<span class="type">Bool</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compare(lhs, rhs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ret = autoClosureFunc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span> &gt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 Swift 来实现一个归并排序</span></span><br><span class="line"><span class="comment">//归并排序会不断的把无序数组二分，直到只有一个，变成有序，然后借助一个合并函数来合并两个有序的数组</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里记住endIndex 是超过count的位置，代表不可达的位置</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(<span class="number">_</span> begin: Index, <span class="number">_</span> end: Index)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> end - begin &gt; <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tmp: [<span class="type">Element</span>] = []</span><br><span class="line">        tmp.reserveCapacity(<span class="built_in">count</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并两个有序数组的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> start: Index, <span class="number">_</span> mid: Index, <span class="number">_</span> end: Index)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> x = begin</span><br><span class="line">            <span class="keyword">var</span> y = mid</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> x != mid, y != end &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>[x] &lt; <span class="keyword">self</span>[y]) &#123;</span><br><span class="line">                    tmp.append(<span class="keyword">self</span>[x])</span><br><span class="line">                    x += <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmp.append(<span class="keyword">self</span>[y])</span><br><span class="line">                    y += <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//一定存在一个数组被取空，所以需要把剩余的合并进去</span></span><br><span class="line">            tmp.append(contentsOf: <span class="keyword">self</span>[x..&lt;mid])</span><br><span class="line">            tmp.append(contentsOf: <span class="keyword">self</span>[y..&lt;end])</span><br><span class="line"></span><br><span class="line">            replaceSubrange(begin..&lt;end, with: tmp)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> middle = (begin + end) / <span class="number">2</span></span><br><span class="line">        mergeSort(begin, middle)</span><br><span class="line">        mergeSort(middle, end)</span><br><span class="line">        merge(begin, middle, end)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基于运行时的NSSortDescriptor 比较需要提供的是keyPath 与 Selector，如果出现不匹配的情况</span></span><br><span class="line"><span class="comment">//很容易出现运行时异常</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SortedStruct</span>: <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> &lt;(lhs: SortedStruct, rhs: SortedStruct) -&gt; <span class="title">Bool</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.name &lt; rhs.name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: SortedStruct, rhs: SortedStruct)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.name == rhs.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> structArray: [<span class="type">SortedStruct</span>] = [</span><br><span class="line">            <span class="type">SortedStruct</span>(name: <span class="string">"Fpp"</span>, type: <span class="number">11</span>),</span><br><span class="line">            <span class="type">SortedStruct</span>(name: <span class="string">"cc"</span>, type: <span class="number">2</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    structArray.<span class="built_in">sort</span>(by: &gt;)</span><br></pre></td></tr></table></figure><h3 id="重载操作符"><a href="#重载操作符" class="headerlink" title="重载操作符"></a>重载操作符</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载操作符号 infix 居中， prefix 前置，postfix 后置</span></span><br><span class="line"><span class="comment">//LogicalConjunctionPrecedence 逻辑优先级</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> |&gt;:<span class="type">LogicalConjunctionPrecedence</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> |&gt;&lt;T: Comparable&gt;<span class="params">(lhs: T, rhs: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs &gt; rhs</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>|&gt;<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="设置只能被Class实现的协议"><a href="#设置只能被Class实现的协议" class="headerlink" title="设置只能被Class实现的协议"></a>设置只能被Class实现的协议</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">onlyClassProtocol</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="escapting"><a href="#escapting" class="headerlink" title="@escapting"></a>@escapting</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@escapting 会超出当前函数的作用域，最后一个return后依然会被执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">escaptingClosure</span><span class="params">(first: Int, escapting: @escapting <span class="params">(Int)</span></span></span>-&gt;<span class="type">Void</span>) &#123;</span><br><span class="line">    escapting(first)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本函数&quot;&gt;&lt;a href=&quot;#基本函数&quot; class=&quot;headerlink&quot; title=&quot;基本函数&quot;&gt;&lt;/a&gt;基本函数&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="Swift" scheme="http://macan999server.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>ControlFlow-Swift</title>
    <link href="http://macan999server.com/2017/03/15/ControlFlow-Swift/"/>
    <id>http://macan999server.com/2017/03/15/ControlFlow-Swift/</id>
    <published>2017-03-15T07:29:55.000Z</published>
    <updated>2017-04-15T01:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本控制"><a href="#基本控制" class="headerlink" title="基本控制"></a>基本控制</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">4</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> x &lt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = (<span class="number">12</span>, <span class="number">13</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> (<span class="number">12</span>, <span class="number">13</span>) = p1 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"equal"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//value binding</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="string">"hello"</span></span><br><span class="line"><span class="keyword">switch</span> p1 &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"====="</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">is</span> <span class="type">String</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"is String"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Must do something"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> skills = [<span class="string">"JS"</span>, <span class="literal">nil</span>, <span class="string">"C"</span>, <span class="literal">nil</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> skill? <span class="keyword">in</span> skills &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Get <span class="subst">\(skill)</span> "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> percentage = <span class="number">0.5</span></span><br><span class="line"><span class="comment">//Range 匹配</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="number">0</span>...<span class="number">1</span> = percentage &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"In range"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"FPP"</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">34</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> (<span class="string">"FPP"</span>, <span class="number">34</span>) = (name, age) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Match user"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义约等"><a href="#自定义约等" class="headerlink" title="自定义约等"></a>自定义约等</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//样式匹配背后的准则</span></span><br><span class="line"><span class="comment">//Range ~= T 由系统实现了， 对应到了 if case 0...1 = percentage</span></span><br><span class="line"><span class="comment">//打印 ~  =  就是约等</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> ~=&lt;T&gt;<span class="params">(value: T, pattern: ClosedRange&lt;T&gt;)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.<span class="built_in">contains</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="number">0.5</span> = <span class="number">0.0</span>...<span class="number">1.0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"自定义约等"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本控制&quot;&gt;&lt;a href=&quot;#基本控制&quot; class=&quot;headerlink&quot; title=&quot;基本控制&quot;&gt;&lt;/a&gt;基本控制&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="Swift" scheme="http://macan999server.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Optional-Swift</title>
    <link href="http://macan999server.com/2017/03/15/Optional-Swift/"/>
    <id>http://macan999server.com/2017/03/15/Optional-Swift/</id>
    <published>2017-03-15T07:28:50.000Z</published>
    <updated>2017-04-15T01:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="guard-的好处"><a href="#guard-的好处" class="headerlink" title="guard 的好处"></a>guard 的好处</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Optional 本质上是一个枚举，.none(nil) , .some(T)</span></span><br><span class="line"><span class="comment">//有值会自动升级为.some , nil 会自动升级为 .none</span></span><br><span class="line"><span class="comment">//注意guard 的用法，如果要在多处用同一个 unwarping</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="type">Int</span>? = <span class="number">1</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> nextA = a <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以后都可以用nextA, 不用一直unwraping</span></span><br></pre></td></tr></table></figure><h3 id="闭包行为"><a href="#闭包行为" class="headerlink" title="闭包行为"></a>闭包行为</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对比一下和JS的闭包行为, swift 闭包捕获的是值，而 JS 捕获的是对象</span></span><br><span class="line"><span class="keyword">var</span> array: [<span class="type">Closure</span>] = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">5</span> &#123;</span><br><span class="line">   array.append(&#123; <span class="built_in">print</span>(i)&#125;)</span><br><span class="line">&#125;</span><br><span class="line">array[<span class="number">0</span>]()</span><br><span class="line">array[<span class="number">1</span>]()</span><br><span class="line">array[<span class="number">2</span>]()</span><br><span class="line">array[<span class="number">3</span>]()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> funcArray = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// for (let i in [0, 1, 2])&#123; </span></span><br><span class="line"><span class="comment">//如果变成let 则是0，1， 2，var 则是2，2，2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])&#123;</span><br><span class="line">    funcArray[i] = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcArray[<span class="number">0</span>]();</span><br><span class="line">funcArray[<span class="number">1</span>]();</span><br><span class="line">funcArray[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure><h3 id="Never-关键字"><a href="#Never-关键字" class="headerlink" title="Never 关键字"></a>Never 关键字</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Never 意味着永远不会正确返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnNever</span><span class="params">(<span class="number">_</span> input: Int)</span></span> -&gt; <span class="type">Never</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> input &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fatalError</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;guard-的好处&quot;&gt;&lt;a href=&quot;#guard-的好处&quot; class=&quot;headerlink&quot; title=&quot;guard 的好处&quot;&gt;&lt;/a&gt;guard 的好处&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Swift" scheme="http://macan999server.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Collection-Swift</title>
    <link href="http://macan999server.com/2017/03/14/Collection-Swift/"/>
    <id>http://macan999server.com/2017/03/14/Collection-Swift/</id>
    <published>2017-03-14T08:44:47.000Z</published>
    <updated>2017-04-15T01:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ArraySlice-的内存结构"><a href="#ArraySlice-的内存结构" class="headerlink" title="ArraySlice 的内存结构"></a>ArraySlice 的内存结构</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArraySlice 的内存结构 实际只是包含了一个ptr 和 一个指向开始和结束位置的索引</span></span><br><span class="line"><span class="comment">//因此 ArraySlice 的执行效率会更高</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | length  | 5 |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | storage ptr |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">//           |</span></span><br><span class="line"><span class="comment">//           v</span></span><br><span class="line"><span class="comment">//           +---+---+---+---+---+---------------------+</span></span><br><span class="line"><span class="comment">//           | 1 | 2 | 3 | 4 | 5 |  reserved capacity  |</span></span><br><span class="line"><span class="comment">//           +---+---+---+---+---+---------------------+</span></span><br><span class="line"><span class="comment">//           ^</span></span><br><span class="line"><span class="comment">//           |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | storage ptr |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | beg idx | 0 |</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br><span class="line"><span class="comment">// | end idx | 3 |  ArraySlice for [0...2]</span></span><br><span class="line"><span class="comment">// +---------+---+</span></span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="Set-操作图"><a href="#Set-操作图" class="headerlink" title="Set 操作图"></a>Set 操作图</h4><p><img src="http://oedbfiet1.bkt.clouddn.com/20170314148946120345189.png" alt="集合图"><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Set</span></span><br><span class="line">    <span class="keyword">var</span> setA: <span class="type">Set</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="keyword">var</span> setB: <span class="type">Set</span> = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//base</span></span><br><span class="line">    setA.isEmpty</span><br><span class="line">    setA.<span class="built_in">contains</span>(<span class="number">3</span>)</span><br><span class="line">    setA.remove(at: setA.startIndex)</span><br><span class="line">    setA.insert(<span class="number">8</span>)</span><br><span class="line">    <span class="built_in">print</span>(setA)</span><br><span class="line"><span class="comment">//    setA.removeAll()</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> setA &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">c</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    setA.forEach &#123;</span><br><span class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(setA.sorted())</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回新对象版本</span></span><br><span class="line">    <span class="keyword">let</span> unionSet = setA.union(setB)</span><br><span class="line">    <span class="keyword">let</span> subtractionSet = setA.subtracting(setB)</span><br><span class="line">    <span class="keyword">let</span> symmetricSet = setA.symmetricDifference(setB)</span><br><span class="line">    <span class="keyword">let</span> intersectionSet = setA.intersection(setB)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(unionSet)</span>-<span class="subst">\(subtractionSet)</span>-<span class="subst">\(symmetricSet)</span>-<span class="subst">\(intersectionSet)</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mutating 版本, 都加上form</span></span><br><span class="line">    setA.formUnion(setB)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(setA)</span>"</span>)</span><br><span class="line">    setA.formIntersection(setB)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(setA)</span>"</span>)</span><br><span class="line">    setA.formSymmetricDifference(setB)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(setA)</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IndexSet CharacterSet</span></span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">c</span>: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>)</span><br><span class="line">    <span class="keyword">let</span> charSet = <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;(arrayLiteral: <span class="string">"1"</span>, <span class="string">"2"</span>)</span><br><span class="line">    <span class="built_in">print</span>(charSet)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Dictionary</span></span><br><span class="line">    <span class="comment">//1. 一般不要用class 作为 key，因为 Class 可能会发生改变，如果 Class 改变后他的 Hash 也要跟着变，</span></span><br><span class="line">    <span class="comment">//这样就无法根据Hash表来找到正确的元素了。</span></span><br><span class="line">    <span class="keyword">let</span> dic: [<span class="type">String</span>: <span class="type">Any</span>] = [<span class="string">"key1"</span>: <span class="number">1</span>, <span class="string">"key"</span>: <span class="number">2</span>]</span><br><span class="line">    <span class="comment">//dic 的map 默认行为是返回一个 map</span></span><br><span class="line">    <span class="built_in">print</span>(dic.<span class="built_in">map</span> &#123;</span><br><span class="line">        $<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数对序列的影响</span></span><br><span class="line">    <span class="keyword">var</span> currentMap = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="built_in">print</span>(currentMap.<span class="built_in">map</span> &#123;</span><br><span class="line">        $<span class="number">0</span> * $<span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">print</span>(currentMap.<span class="built_in">max</span>())</span><br><span class="line">    <span class="built_in">print</span>(currentMap.<span class="built_in">min</span>())</span><br><span class="line">    <span class="comment">//注意分区是在当前的结构上操作，</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pivot = <span class="keyword">try</span> currentMap.<span class="built_in">partition</span>(by: &#123;</span><br><span class="line">            $<span class="number">0</span> &gt; <span class="number">2</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">print</span>(pivot)</span><br><span class="line">    &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="设计一个去重的Array函数"><a href="#设计一个去重的Array函数" class="headerlink" title="设计一个去重的Array函数"></a>设计一个去重的Array函数</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让序列支持去重</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Iterator</span>.<span class="title">Element</span>: <span class="title">Hashable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个函数用来做去重</span></span><br><span class="line">    <span class="comment">//O(n) 时间复杂度</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">flite</span><span class="params">()</span></span> -&gt; [<span class="type">Iterator</span>.<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> tempSet: <span class="type">Set</span>&lt;<span class="type">Iterator</span>.<span class="type">Element</span>&gt; = <span class="type">Set</span>&lt;<span class="type">Iterator</span>.<span class="type">Element</span>&gt;()</span><br><span class="line">        <span class="comment">//用到了序列自身的 filter 方法，用一个临时的 set 来判断是否已经被包含</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">filter</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> tempSet.<span class="built_in">contains</span>($<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tempSet.insert($<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查CopyOnWrite"><a href="#检查CopyOnWrite" class="headerlink" title="检查CopyOnWrite"></a>检查CopyOnWrite</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> pointArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  <span class="comment">//获取地址，来检查copyOnWrite</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">getBufferAddress</span>&lt;T&gt;<span class="params">(of array: [T])</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> array.withUnsafeBufferPointer &#123; buffer <span class="keyword">in</span></span><br><span class="line">          <span class="keyword">return</span> <span class="type">String</span>(describing: buffer.baseAddress)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  <span class="keyword">var</span> second = first</span><br><span class="line">  <span class="built_in">print</span>(getBufferAddress(of: first))</span><br><span class="line">  <span class="built_in">print</span>(getBufferAddress(of: second))</span><br><span class="line">  second.append(<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">print</span>(getBufferAddress(of: second))</span><br><span class="line"><span class="comment">//OutPut</span></span><br><span class="line">  <span class="type">Optional</span>(<span class="number">0x00007fbce9403370</span>)</span><br><span class="line">  <span class="type">Optional</span>(<span class="number">0x00007fbce9403370</span>)</span><br><span class="line">  <span class="type">Optional</span>(<span class="number">0x00007fbce9405dd0</span>)</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//高阶函数</span></span><br><span class="line">    <span class="comment">//filter, map , reduce, flatmap</span></span><br><span class="line">    <span class="comment">//Filter</span></span><br><span class="line">    <span class="keyword">let</span> myArray: [<span class="type">Int</span>] = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>]</span><br><span class="line">    myArray.<span class="built_in">filter</span> &#123;</span><br><span class="line">        $<span class="number">0</span> % <span class="number">2</span> != <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> filterArray = myArray.myFilter &#123;</span><br><span class="line">        $<span class="number">0</span> % <span class="number">2</span> != <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(filterArray)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Reduce</span></span><br><span class="line">    <span class="keyword">let</span> myArray1: [<span class="type">String</span>] = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]</span><br><span class="line">    <span class="keyword">var</span> reduceStr = myArray1.<span class="built_in">reduce</span>(<span class="string">""</span>, +)</span><br><span class="line">    <span class="comment">//注意+也满足传入两个参数，输入一个相同类型的值</span></span><br><span class="line">    reduceStr = myArray1.myReduce(result: <span class="string">""</span>, +)</span><br><span class="line">    <span class="built_in">print</span>(reduceStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//FlatMap</span></span><br><span class="line">    <span class="comment">//FlatMap 接收一个成员，返回一个类型, 然后在把结果组合成一个数组</span></span><br><span class="line">    <span class="keyword">let</span> dic1: [<span class="type">String</span>: <span class="type">Int</span>] = [<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>, <span class="string">"c"</span>: <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">let</span> str = dic1.flatMap &#123; element -&gt; <span class="type">String</span>? <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">var</span> v: <span class="type">String</span> = <span class="type">String</span>(element.value)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">map</span> = dic1.flatMap &#123; animal <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> dic.<span class="built_in">map</span> &#123; id <span class="keyword">in</span></span><br><span class="line">            (animal, id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> flatMap = dic1.myFlatMap &#123; element -&gt; (<span class="type">String</span>, <span class="type">Int</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> (element.<span class="number">0</span>, element.<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(flatMap)</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现基本的高阶函数Filter</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myFilter</span><span class="params">(<span class="number">_</span> trans: <span class="params">(Element)</span></span></span> -&gt; <span class="type">Bool</span>) -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> filterArray: [<span class="type">Element</span>] = []</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> <span class="keyword">where</span> trans(element) &#123;</span><br><span class="line">            filterArray.append(element)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filterArray</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myReduce</span>&lt;T&gt;<span class="params">(result: T, <span class="number">_</span> trans: <span class="params">(T, Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">reduce</span> = result</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="built_in">reduce</span> = trans(<span class="built_in">reduce</span>, element)  <span class="comment">//如果传入 + ，则这里相当于 reduce + element</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Element 代表迭代的成员类型，大写的Key， Value 代表key和value 的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myFlatMap</span>&lt;T&gt;<span class="params">(transform: <span class="params">(Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp: [<span class="type">T</span>] = []</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> ret = transform(v)</span><br><span class="line">            tmp.append(ret)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ArraySlice-的内存结构&quot;&gt;&lt;a href=&quot;#ArraySlice-的内存结构&quot; class=&quot;headerlink&quot; title=&quot;ArraySlice 的内存结构&quot;&gt;&lt;/a&gt;ArraySlice 的内存结构&lt;/h3&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Swift" scheme="http://macan999server.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Load()+Initialize()</title>
    <link href="http://macan999server.com/2017/03/11/Load-Initialize/"/>
    <id>http://macan999server.com/2017/03/11/Load-Initialize/</id>
    <published>2017-03-11T14:11:22.000Z</published>
    <updated>2017-04-15T01:30:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><ul><li>Load 方法当类被加载到 runtime 的时候就会运行，而且有依据如下两个条件：<br>A: 根据Compile Sources 中的顺序来加载。<br>B: Category  会在一般类之后。<br>C: 有继承关系的会先加载父类。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Father </span></span><br><span class="line">@implementation Father </span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== father load"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== father initialize"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">//Son</span></span><br><span class="line">@interface Son : Father</span><br><span class="line">@end</span><br><span class="line">@implementation Son </span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== Son load"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== Son initialize"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"><span class="comment">//Father Category</span></span><br><span class="line">@<span class="function">implementation <span class="title">Father</span> <span class="params">(category)</span></span></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== father category load"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== father category initialize"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"><span class="comment">//Son category</span></span><br><span class="line">@<span class="function">implementation <span class="title">Son</span> <span class="params">(category)</span></span></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== Son category load"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== Son category initialize"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">//Compile Source Order</span></span><br><span class="line">Son.m</span><br><span class="line">Father.m</span><br><span class="line">Son+category.m</span><br><span class="line">Father+category.m</span><br><span class="line"></span><br><span class="line"><span class="comment">//OutPut</span></span><br><span class="line"> === father load</span><br><span class="line"> === Son load</span><br><span class="line"> === Son category load</span><br><span class="line"> === father category load</span><br></pre></td></tr></table></figure><ul><li>Initialize 发生在类第一次初始化时, 遵循以下规律(当然如果load方法里面调用例如 [self Class] 这样的方法，会先调用 initialize。<br>A: 有继承关系的如果子类没有实现Initialize ，会调用父类的，也就是说父类的Initialize 可能会被调用2次。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Father</span></span><br><span class="line">@implementation Father </span><br><span class="line">+ (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line">    NSLog(@<span class="string">"=== father initialize"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"><span class="comment">//Son</span></span><br><span class="line">@interface Son : Father</span><br><span class="line">@end</span><br><span class="line">@implementation Son </span><br><span class="line"><span class="comment">//+ (void)initialize &#123;</span></span><br><span class="line"><span class="comment">//    NSLog(@"=== Son initialize");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">@end</span><br><span class="line"><span class="comment">//AppDelegate.m</span></span><br><span class="line">[Son <span class="keyword">new</span>]</span><br><span class="line">[Father <span class="keyword">new</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//OutPut</span></span><br><span class="line">=== father initialize</span><br><span class="line">=== father initialize</span><br><span class="line"></span><br><span class="line"><span class="comment">//Resolver</span></span><br><span class="line">+ (<span class="keyword">void</span>)initialize &#123;</span><br><span class="line">    <span class="keyword">if</span> (self == [Father class])&#123;</span><br><span class="line">        NSLog(@<span class="string">"=== father initialize"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B: 如果 Category 也重写了Initialize, 会override， 也就是原来类里面的Initialize 不会被调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最上面源码里面的输出</span></span><br><span class="line">=== father category initialize</span><br><span class="line">=== Son category initialize</span><br></pre></td></tr></table></figure><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>load() 会增加启动时间，不适宜做过多的事情，一般用于简单的运行时方法交换。</li><li>Initialize() 仅仅用来需要延迟加载一些全局或者静态变量。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Prepare&quot;&gt;&lt;a href=&quot;#Prepare&quot; class=&quot;headerlink&quot; title=&quot;Prepare&quot;&gt;&lt;/a&gt;Prepare&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Load 方法当类被加载到 runtime 的时候就会运行，而且有依据如下两个条件：&lt;b
      
    
    </summary>
    
      <category term="iOS" scheme="http://macan999server.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Tree</title>
    <link href="http://macan999server.com/2017/03/11/tree/"/>
    <id>http://macan999server.com/2017/03/11/tree/</id>
    <published>2017-03-11T08:04:37.000Z</published>
    <updated>2017-04-15T01:45:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h3><ul><li><p>为什么在很多时候会出现二级指针的情况？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果需要在某个函数里面改变指针的指向，一种方式是传递双重指针，一种方式是返回一个新的对象。</span></span><br></pre></td></tr></table></figure></li><li><p>前序中序后序遍历<br>遍历的参照点在于每一颗子树的root，例如前序遍历: root-&gt;左-&gt;右，<br>中序遍历: 左-&gt;root-&gt;右， 后序遍历: 左-&gt;右-&gt;root</p></li></ul><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bst.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//要创建一个二叉搜索树:</span></span><br><span class="line"><span class="comment">//先从存储来说，可以用数组来构建，但是一般是建立在完全二叉树的情况下。</span></span><br><span class="line"><span class="comment">//所以相对来说用链表来记录更合理，可以记录下一个节点的信息。</span></span><br><span class="line"><span class="comment">//使用链表一般也有两种表现形态，一种只有一个头节点来表示，因为树总是从树根开始</span></span><br><span class="line"><span class="comment">//进行存储，另一种是用一种单独的结构来记录根节点，然后提供相应的初始化方法，例如通过一组数据</span></span><br><span class="line"><span class="comment">//来构建BST, 或者通过一个一个的add方式来添加新节点。</span></span><br><span class="line"><span class="comment">//注意BST一般没有相等的节点。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125; TreeNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(TreeNode **node, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creatBST</span><span class="params">(TreeNode **tree, <span class="keyword">int</span> inputData[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        insert(tree, inputData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为会改变node 的指向，所以需要传递二级指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(TreeNode **node, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    TreeNode *insertNode = (TreeNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">    insertNode-&gt;value = value;</span><br><span class="line">    insertNode-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    insertNode-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *node = insertNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左子树为空，并且值小于当前node</span></span><br><span class="line">    <span class="keyword">if</span> ((*node)-&gt;left == <span class="literal">NULL</span> &amp;&amp; value &lt; (*node)-&gt;value) &#123;</span><br><span class="line">        (*node)-&gt;left = insertNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((*node)-&gt;right == <span class="literal">NULL</span> &amp;&amp; value &gt; (*node)-&gt;value) &#123;</span><br><span class="line">        (*node)-&gt;right = insertNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value &lt; (*node)-&gt;value) &#123;</span><br><span class="line">        insert(&amp;(*node)-&gt;left, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value &gt; (*node)-&gt;value) &#123;</span><br><span class="line">        insert(&amp;(*node)-&gt;right, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(TreeNode *node, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value == node-&gt;value) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"查找到 %d"</span>, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; node-&gt;value) &#123;</span><br><span class="line">        search(node-&gt;right, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        search(node-&gt;left, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对任何一颗子树 中左右</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode *tree)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>, tree-&gt;value);</span><br><span class="line">    preOrder(tree-&gt;left);</span><br><span class="line">    preOrder(tree-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左 中 右</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">middleOrder</span><span class="params">(TreeNode *tree)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    preOrder(tree-&gt;left);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>, tree-&gt;value);</span><br><span class="line">    preOrder(tree-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backOrder</span><span class="params">(TreeNode *tree)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    preOrder(tree-&gt;left);</span><br><span class="line">    preOrder(tree-&gt;right);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>, tree-&gt;value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode *tree = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> input[<span class="number">11</span>] = &#123;<span class="number">55</span>, <span class="number">43</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">80</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">72</span>&#125;;</span><br><span class="line">    creatBST(&amp;tree, input, <span class="number">9</span>);</span><br><span class="line">    search(tree, <span class="number">4</span>);</span><br><span class="line">    search(tree, <span class="number">11</span>);</span><br><span class="line">    preOrder(tree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    middleOrder(tree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    backOrder(tree);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Prepare&quot;&gt;&lt;a href=&quot;#Prepare&quot; class=&quot;headerlink&quot; title=&quot;Prepare&quot;&gt;&lt;/a&gt;Prepare&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么在很多时候会出现二级指针的情况？&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Alogrithms" scheme="http://macan999server.com/categories/Alogrithms/"/>
    
    
  </entry>
  
  <entry>
    <title>SPM for Swift</title>
    <link href="http://macan999server.com/2017/03/11/SPM-for-Swift/"/>
    <id>http://macan999server.com/2017/03/11/SPM-for-Swift/</id>
    <published>2017-03-11T03:57:21.000Z</published>
    <updated>2017-04-15T01:44:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p>swift package init –type library      创建library</p></li><li><p>swift build</p></li><li><p>swift test</p><p>​</p><h3 id="SPM-的架构"><a href="#SPM-的架构" class="headerlink" title="SPM 的架构"></a>SPM 的架构</h3></li></ul><ol><li><p>Package.swift 构建依赖关系</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> package = <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">"BST"</span>,</span><br><span class="line">    targets: [</span><br><span class="line">        <span class="type">Target</span>(name: <span class="string">"Main"</span>, dependencies: [<span class="string">"BST"</span>])</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>Sources 目录下面用目录包含各个module</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Sources</span></span><br><span class="line">├── <span class="type">BST</span></span><br><span class="line">│   └── <span class="type">BST</span>.swift</span><br><span class="line">└── <span class="type">Main</span></span><br><span class="line">    └── main.swift</span><br></pre></td></tr></table></figure></li><li><p>然后执行 swift build 命令，根据依赖关系，找到main入口，就可以生成可执行文件，并调用相关 module 了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;swift package init –type library      创建library&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Swift" scheme="http://macan999server.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>内排序</title>
    <link href="http://macan999server.com/2017/03/10/%E5%86%85%E6%8E%92%E5%BA%8F/"/>
    <id>http://macan999server.com/2017/03/10/内排序/</id>
    <published>2017-03-10T14:22:36.000Z</published>
    <updated>2017-04-15T01:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>决定冒泡的方向，每次冒泡相邻元素比较，每次固定一个泡。</li><li>如果一趟未产生任何交换，则整个序列已排序，无需再比较。</li><li>时间复杂度：比较的次数n-1 … 1 , 总和 O(n^2) ,  空间复杂度 O(1)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序, 从小到大</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123; <span class="comment">//每次要确定的冒泡元素</span></span><br><span class="line">        <span class="keyword">int</span> sorted = <span class="number">1</span>;   <span class="comment">//做一个优化，如果一趟排序中都没有产生交换，则不需要以后操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt; i; j--) &#123; <span class="comment">//从后往前冒</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(j, j<span class="number">-1</span>);</span><br><span class="line">                sorted = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sorted == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li>快排核心找基准数，把基准数放到某一个位置，左边的都比它小，右边的都比它大。</li><li>如果我们以最左边的为基准，那么需要注意的是为什么从右边找，因为从左边找，你可能无法找到比它小的元素，这样你就无法执行基准数和找到的数的交换，如果从右边找，至少可以找到刚好等于基准数的元素，这样才满足基准数左边都小于，右边都大于的思想。</li><li>时间复杂度：如果每次被二分，总共被分成的是logn 趟， 每次比较的是 n 次， 时间复杂度 O(nlogn), 空间复杂度 O(1) 。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快排</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSortByRange</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="comment">//边界检查</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = left;</span><br><span class="line">    <span class="keyword">int</span> r = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pivotIndex = left;</span><br><span class="line">    <span class="keyword">int</span> pivot = a[left];</span><br><span class="line">    <span class="comment">//基准数在左边，为什么是从右边找，而不是从左边找呢，因为如果从左边找，你很可能找不到，这样就无法执行</span></span><br><span class="line">    <span class="comment">//基准数和相遇点的交换了，而从左边找，至少可以直接找到基准数的这个位置</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; a[right] &gt;= pivot) &#123; <span class="comment">//从右边找到比基准数小的那个</span></span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; a[left] &lt;= pivot) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            swap(left, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt;= right) &#123; <span class="comment">//在不出现越界的情况下，执行基准和相遇点的交换</span></span><br><span class="line">        swap(pivotIndex, left);</span><br><span class="line"></span><br><span class="line">        quickSortByRange(a, l, left - <span class="number">1</span>);</span><br><span class="line">        quickSortByRange(a, left + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    quickSortByRange(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul><li>插入排序关键在于插入，分割为排序和未排序部分，不断把右边的元素插入到左边的序列中，注意是相邻元素交换。</li><li>时间复杂度：O(n^2), 空间复杂度 O(1)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///假定按降序排列, 插入排序</span></span><br><span class="line"><span class="comment">///时间复杂度：外循环n，内循环1，2，。。。。n， 所以平均复杂度为O(n^2)</span></span><br><span class="line"><span class="comment">///空间复杂度: O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertOrder</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//每次选定一个元素同前面的已排序的元素做对比，找到应该插入的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> key = <span class="built_in">array</span>[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key &gt; <span class="built_in">array</span>[j]) &#123;</span><br><span class="line">                swap(<span class="built_in">array</span>, j, j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>选择排序每次从未排序的队列中选择出最大或者最小元素，放到已排序的队列末尾。</li><li>时间复杂度: O(n^2) , 空间复杂度: O(1)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///选择排序,降序,</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectOrder</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//选择排序，每次从无序的被选的元素中找最大或者最小的放到有序的环境中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> selectIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[j] &gt; <span class="built_in">array</span>[i]) &#123;</span><br><span class="line">                selectIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        swap(<span class="built_in">array</span>, i, selectIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 Swift 来实现一个归并排序</span></span><br><span class="line"><span class="comment">//归并排序会不断的把无序数组二分，直到只有一个，变成有序，然后借助一个合并函数来合并两个有序的数组</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里记住endIndex 是超过count的位置，代表不可达的位置</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(<span class="number">_</span> begin: Index, <span class="number">_</span> end: Index)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> end - begin &gt; <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tmp: [<span class="type">Element</span>] = []</span><br><span class="line">        tmp.reserveCapacity(<span class="built_in">count</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并两个有序数组的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> start: Index, <span class="number">_</span> mid: Index, <span class="number">_</span> end: Index)</span></span> &#123;</span><br><span class="line">            <span class="keyword">var</span> x = begin</span><br><span class="line">            <span class="keyword">var</span> y = mid</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> x != mid, y != end &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>[x] &lt; <span class="keyword">self</span>[y]) &#123;</span><br><span class="line">                    tmp.append(<span class="keyword">self</span>[x])</span><br><span class="line">                    x += <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmp.append(<span class="keyword">self</span>[y])</span><br><span class="line">                    y += <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//一定存在一个数组被取空，所以需要把剩余的合并进去</span></span><br><span class="line">            tmp.append(contentsOf: <span class="keyword">self</span>[x..&lt;mid])</span><br><span class="line">            tmp.append(contentsOf: <span class="keyword">self</span>[y..&lt;end])</span><br><span class="line"></span><br><span class="line">            replaceSubrange(begin..&lt;end, with: tmp)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> middle = (begin + end) / <span class="number">2</span></span><br><span class="line">        mergeSort(begin, middle)</span><br><span class="line">        mergeSort(middle, end)</span><br><span class="line">        merge(begin, middle, end)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>因为快排拥有比较好的平均时间复杂度，所以快排用的范围相对来说更广一些。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;决定冒泡的方向，每次冒泡相邻元素比较，每次固定一个泡。&lt;/li&gt;
&lt;li&gt;如果一趟未产生任何交换，则整个序列已排
      
    
    </summary>
    
      <category term="Alogrithms" scheme="http://macan999server.com/categories/Alogrithms/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode:14.Longest Common Prefix</title>
    <link href="http://macan999server.com/2017/02/18/LeetCode-14-Longest-Common-Prefix/"/>
    <id>http://macan999server.com/2017/02/18/LeetCode-14-Longest-Common-Prefix/</id>
    <published>2017-02-18T02:35:56.000Z</published>
    <updated>2017-04-15T01:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Write a function to find the longest common prefix string amongst an array of strings.</span></span><br><span class="line"><span class="comment">思想：拿第一个 str 作为标准，后面的字符串依次做比对。</span></span><br><span class="line"><span class="comment">复杂度：时间复杂度 O(nm), 空间复杂度 O(m), m 是第一个字符串的长度。</span></span><br><span class="line"><span class="comment">这题的关键在于，不断缩减比对的长度，例如下一个比对的长度小于当前，则最小长度就变成了下一个的长度，</span></span><br><span class="line"><span class="comment">如果同下一个比对的过程中出现不匹配，则最小长度又变成了不匹配长度位置的上一位。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="number">_</span> strs: [String])</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> strs.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> compareArray = [<span class="type">Character</span>](strs[<span class="number">0</span>].characters)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> strs &#123;</span><br><span class="line">        <span class="keyword">let</span> currentArray = [<span class="type">Character</span>](s.characters)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为始终共有长度是最小长度，所以每次都用最小长度去作为下一次比较的基础</span></span><br><span class="line">        <span class="keyword">if</span> compareArray.<span class="built_in">count</span> &gt; currentArray.<span class="built_in">count</span> &#123;</span><br><span class="line">            compareArray = <span class="type">Array</span>(compareArray[<span class="number">0</span> ..&lt; currentArray.<span class="built_in">count</span>])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;compareArray.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> currentArray[i] != compareArray[i] &#123;</span><br><span class="line">                compareArray = <span class="type">Array</span>(compareArray[<span class="number">0</span> ..&lt; i])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="type">String</span>(compareArray)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(longestCommonPrefix([<span class="string">"abc"</span>, <span class="string">"ab"</span>, <span class="string">"ab"</span>, <span class="string">"abc"</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Alogrithms" scheme="http://macan999server.com/categories/Alogrithms/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello 2017</title>
    <link href="http://macan999server.com/2017/01/01/hello-world/"/>
    <id>http://macan999server.com/2017/01/01/hello-world/</id>
    <published>2017-01-01T03:11:11.000Z</published>
    <updated>2017-04-15T02:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    过去那些年，一直放置片段和心声之于 Evernote 和 Bear，未来的日子里，终于要开博了，无论好坏，这都是一个谨慎而更加认真的开始。反观目前的现状，未来的日子要不断面临压力和挑战，无论是学习还是工作，都必将无比精彩，那些挥之不去的过去，那些期盼已久的未来，都是来年要走的不归路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    过去那些年，一直放置片段和心声之于 Evernote 和 Bear，未来的日子里，终于要开博了，无论好坏，这都是一个谨慎而更加认真的开始。反观目前的现状，未来的日子要不断面临压力和挑战，无论是学习还是工作，都必将无比精彩，那些挥之不去的过去，那些期盼已久的未来，都
      
    
    </summary>
    
      <category term="Mine" scheme="http://macan999server.com/categories/Mine/"/>
    
    
  </entry>
  
</feed>
